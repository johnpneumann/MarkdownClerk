=============
MarkdownClerk
=============
.. image:: https://travis-ci.org/johnpneumann/MarkdownClerk.svg?branch=master
:target: https://travis-ci.org/johnpneumann/MarkdownClerk

.. image:: https://coveralls.io/repos/github/johnpneumann/MarkdownClerk/badge.svg?branch=master
:target: https://coveralls.io/github/johnpneumann/MarkdownClerk?branch=master

.. image:: https://readthedocs.org/projects/markdownclerk/badge/?version=latest
:target: http://markdownclerk.readthedocs.io/en/latest/?badge=latest
:alt: Documentation Status

Markdown Clerk is a simple project tracker that generates markdown files
in a structured way.

.. contents:: Table of Contents

Installation
------------
Installation can be done with pip.

.. code:: bash

   pip install MarkdownClerk

If you want to build it from source, you can pip install it by cloning
the repository and running:

.. code:: bash

   git clone https://github.com/johnpneumann/MarkdownClerk.git
   cd MarkdownClerk
   pip install .

Docs
----
Documentation can be found at [readthedocs](http://markdownclerk.readthedocs.io/en/latest/)

Developing
----------
Adherence to code quality and current form is strictly enforced, however,
contributions are **greatly** appreciated. To get started, there is a
*dev.txt* file within *requirements* that will install everything for
testing, documentation generation and some extra bits used for daily
work, such as ``iPython``.

Testing
-------
To run the unit tests, install tox and then run ``tox``.

Clean
-----
To clean up the build, run ``make clean``

Documentation
-------------
To generate documentation, you'll need to install Sphinx_ and sphinx_rtd_theme_,
which can be installed using the following command::

   pip install -r requirements/docs.txt

Once those are installed, you'll want to generate the api documentation. Run
the following from the top level of this repo (where this file is)::

   sphinx-apidoc -f -o docs/api markdownclerk

Once that's done documentation can be generated by entering the *docs*
directory and running ``make html``. The output will be generated into
the *_build/html* directory.

Sugar
-----
A ``Makefile`` is provided at the top level of this repo that does various
bits for you without you needing to do much if anything. To see the commands
available run ``make`` or ``make help`` and it will output what commands are
available. Sample output from ``make help`` follows::

   clean - runs clean-build, clean-pyc, clean-tests and clean-log
   clean-build - remove build artifacts
   clean-pyc - remove Python file artifacts
   clean-tests - remove test files
   clean-log - remove log files
   lint - check style with flake8
   checkmanifest - ensure the MANIFEST.in file is up to date
   test - run tests quickly with the default Python
   test-all - run tests on every Python version with tox
   coverage - check code coverage quickly with the default Python
   docs - generate Sphinx HTML documentation, including API docs
   release - package and upload a release
   sdist - package

If you wish to build the docs, run tests or check the manifest, the requirements
above still stand.

Credits
-------

This package was created with Cookiecutter_ and the `johnpneumann/cookiecutter-py`_ project template version 1.0.1.

.. links go below here
.. _Sphinx: http://www.sphinx-doc.org/en/stable/
.. _sphinx-rtd-theme: http://read-the-docs.readthedocs.io/en/latest/theme.html
.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`johnpneumann/cookiecutter-py`: https://github.com/johnpneumann/cookiecutter-py
